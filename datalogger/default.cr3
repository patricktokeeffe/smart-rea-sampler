''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Long-term canister-based trace gas flux measurement system
' using the Relaxed Eddy Accumulation (REA) technique
'
' Laboratory for Atmospheric Research
' Department of Civil & Environmental Engineering
' Washington State University
'
' Licensed under the terms of The MIT License
'
' Contact:  Patrick O'Keeffe <pokeeffe@wsu.edu>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'manually update this constant with results of `git describe` prior to
'deployment but do not check-in file with any value other than empty string
Const VERSION = ""

'========================= DEFAULT SETTINGS =================================
ConstTable
  Const UTC_OFFSET = -8 'Pacific Standard Time
  
  Const DECLIN_MIN = -35 'deg E of TN
  Const DECLIN_MAX = 35 'deg E of TN
  Const DBMULT_MAX = 2 'ratio
EndConstTable


'============================== WIRING ======================================
Const SONIC_COM = Com4 'C7/C8
Const GPS_COM = Com3   'C5/C6

Const HMP_T_DF = 8
Const HMP_RH_DF = 9

Const CTRL_VLV_UP = 1 'C1
Const CTRL_VLV_DN = 2 'C2
'reserved              C3
Const CTRL_PUMPS  = 4 'C4

Const P_CAN_UP_SE = 25
Const P_CAN_DN_SE = 26
Const P_PMP_UP_SE = 27
Const P_PMP_DN_SE = 28
Const P_BARO_SE   = 1

Const SW12_CAN_P = 9  'SW12-1
Const SW12_PMP_P = 10 'SW12-2


'============================ CONSTANTS =====================================
Const MBAR_PER_PSI = 68.947573 'mbar/psia
Const MBAR_PER_INHG = 33.864882 'mbar/inHg
Const PI = 3.14159

Const INTEG = 250     'analog integration time
Const FAST_INTV = 100 'milliseconds, scan freq.
Const FAST_BUFF = 10 
Const SLOW_INTV = 1   'seconds, scan freq.
Const SLOW_BUFF = 5
Const STATS_INTV = 30 'minutes, stats output
Const STOPFULL = 1    'stop recording when tables are full

Const SONIC_RECLEN = 34 'characters per record
Const SONIC_BAUD = 38400
Const SONIC_FORMAT = 3 '8/N/1 @ RS-232 voltages without PakBus pass-thru
Const SONIC_BUFF = SONIC_RECLEN*2 + 1
Const SONIC_VAZ = 0 'device-specific value, offset of device azimuth

Const HMP_T_OFF   = -80
Const HMP_T_MULT  = (60 - HMP_T_OFF)/1000 '-80 to +60 *C over 1V
Const HMP_RH_OFF  = 0
Const HMP_RH_MULT = (100 - HMP_RH_OFF)/1000 '0-100% over 1V

Const P_CAN_UP_OFF = MBAR_PER_PSI*0
Const P_CAN_UP_MLT = MBAR_PER_PSI*(30-P_CAN_UP_OFF)/5000 '0-30 psia over 5Vdc
Const P_CAN_DN_OFF = P_CAN_UP_OFF
Const P_CAN_DN_MLT = P_CAN_UP_MLT

Const P_PMP_UP_OFF = MBAR_PER_PSI*0
Const P_PMP_UP_MLT = MBAR_PER_PSI*(15-P_PMP_UP_OFF)/5000 '0-15 psia over 5Vdc
Const P_PMP_DN_OFF = P_PMP_UP_OFF
Const P_PMP_DN_MLT = P_PMP_UP_MLT

Const P_BARO_OFF = MBAR_PER_INHG*16
Const P_BARO_MLT = MBAR_PER_INHG*(32-P_BARO_OFF)/5000 '16-32 inHg over 5Vdc

Const GPS_INTV = 15 'seconds, scan freq.
Const GPS_MAX_DIFF = 25 'msec, clock tolerance
Const GPS_MED_NUM = 86400/GPS_INTV 'max # of values included in median calc


'============================= VARIABLES ====================================
Dim sonic_bytes
Dim sonic_record As String * SONIC_RECLEN
Public sonic(5)
Alias sonic(1) = sonic_Ux
Alias sonic(2) = sonic_Uy
Alias sonic(3) = sonic_Uz
Alias sonic(4) = sonic_Ts
Alias sonic(5) = sonic_diag
Units sonic = m/s
Units sonic_Ts = degC
Units sonic_diag = arb

Public disable_sonic As Boolean
Public sonic_azimuth = {0}

Public hmp(3)
Alias hmp(1) = hmp_T
Alias hmp(2) = hmp_RH
Alias hmp(3) = hmp_e
Units hmp_T = degC
Units hmp_RH = %
Units hmp_e = kPa

Public pressure(5)
Alias pressure(1) = press_can_UP
Alias pressure(2) = press_can_DN
Alias pressure(3) = press_pump_UP
Alias pressure(4) = press_pump_DN
Alias pressure(5) = press_baro
Units pressure = mbar

Dim nmea_str(2) As String * 90
Public gps16x(15)
Alias gps16x(1)  = lat_deg        '(+)=North, (-)=South
Alias gps16x(2)  = lat_min
Alias gps16x(3)  = long_deg       '(+)=East, (-)=West
Alias gps16x(4)  = long_min
Alias gps16x(5)  = speed
Alias gps16x(6)  = course
Alias gps16x(7)  = mag_var        '(+)=East, (-)=West
Alias gps16x(8)  = fix_quality
Alias gps16x(9)  = num_sat
Alias gps16x(10) = altitude
Alias gps16x(11) = since_pps
Alias gps16x(12) = since_gprmc
Alias gps16x(13) = gps_ready
Alias gps16x(14) = max_clock_change
Alias gps16x(15) = num_clock_change
Units speed = m/s
Units course = degEofN
Units mag_var = degEofN
Units fix_quality = unitless
Units num_sat = count
Units altitude = m
Units since_pps = ms
Units since_gprmc = s
Units max_clock_change = ms
Units num_clock_change = occurrences

'-------------------------- PROCESSING -------------------------------------
Public cov_sonic(1,4) '= [ [Ts, Ux, Uy, Uz] ]

Public work_out(20)
Alias work_out(1)  = Ux_Avg '4x Average()
Alias work_out(2)  = Uy_Avg
Alias work_out(3)  = Uz_Avg
Alias work_out(4)  = Ts_Avg
Alias work_out(5)  = Ts_Std 'Covariance(), 10 vals
Alias work_out(6)  = cov_Ts_Ux
Alias work_out(7)  = cov_Ts_Uy
Alias work_out(8)  = cov_Ts_Uz
Alias work_out(9)  = Ux_Std
Alias work_out(10) = cov_Ux_Uy
Alias work_out(11) = cov_Ux_Uz
Alias work_out(12) = Uy_Std
Alias work_out(13) = cov_Uy_Uz
Alias work_out(14) = Uz_Std
Alias work_out(15) = sonic_WS_sclr_Avg 'WindVector, 4 vals
Alias work_out(16) = sonic_WS_rslt_Avg
Alias work_out(17) = sonic_WD_rslt_Avg
Alias work_out(18) = sonic_WD_csi_Std
Alias work_out(19) = hmp_T_Avg '2x Average()
Alias work_out(20) = hmp_e_Avg
Units Ux_Avg = m/s
Units Uy_Avg = m/s
Units Uz_Avg = m/s
Units Ts_Avg = degC
Units Ts_Std = degC
Units Uz_Std = m/s
Units sonic_WS_sclr_Avg = m/s
Units sonic_WS_rslt_Avg = m/s
Units sonic_WD_rslt_Avg = degEofTN
Units sonic_WD_csi_Std = degrees
Units hmp_T_Avg = degC
Units hmp_e_Avg = kPa

Public derived(2)
Alias derived(1) = hmp_e_sat_Avg
Alias derived(2) = hmp_RH_Avg
Units hmp_e_sat_Avg = kPa
Units hmp_RH_Avg = %

Public Uz_rot 'real-time coordinate-rotated
Units Uz_rot = m/s

Dim sqrt_UV
Dim sqrt_UVW
Public rot_angles(6)
Alias rot_angles(1) = CE
Alias rot_angles(2) = SE
Alias rot_angles(3) = CT
Alias rot_angles(4) = ST
Alias rot_angles(5) = eta
Alias rot_angles(6) = theta
Units eta = degrees
Units theta = degrees

Public rotated(4) 'stream-wise coordinates
Alias rotated(1) = U_Avg
Alias rotated(2) = V_Avg
Alias rotated(3) = W_Avg
Alias rotated(4) = W_Std
Units rotated = m/s

'----------------------------- OPERATION -----------------------------------
Public deadband
Dim neg_deadband
Units deadband = m/s

Public azimuth
Units azimuth = degEofTN

Public vlv_up_ON As Boolean
Public vlv_dn_ON As Boolean

Public is_running As Boolean

Dim just_had_slow_scan As Boolean
Dim inbetween_slow_scan As Boolean


'========================= SETTINGS RETENTION ===============================
Dim filehandle As Long
Const WRITEFILE = 0
Const READFILE = 1

'----- DEFAULT SETTINGS -----
Const SETTINGS_FILE = "CPU:rea_settings.dat"
Const NUM_SETTINGS = {11}

Const DEF_DBAND_MULT = 0.85 '0 < X <= 1
Const DEF_DBAND_MIN = 0.05 'm/s
Const DEF_DBAND_DEF = 0.1 'm/s
Const DEF_SONIC_AZIMUTH = -1 'degEofN, -1=disabled
Const DEF_SONIC_HEIGHT = 0 'm, 0=disabled
Const DEF_SITE_DECLIN = 0 'degEofTN, 0=disabled
Const DEF_SITE_RUFNESS = 0 'm, 0=disabled
Const DEF_SITE_FETCH_N = 0 'm, 0=disabled
Const DEF_SITE_FETCH_E = 0 'm, 0=disabled
Const DEF_SITE_FETCH_S = 0 'm, 0=disabled
Const DEF_SITE_FETCH_W = 0 'm, 0=disabled

Dim choice(NUM_SETTINGS)
Alias choice(1)  = ch_dband_mult
Alias choice(2)  = ch_dband_min
Alias choice(3)  = ch_dband_def
Alias choice(4)  = ch_sonic_azimuth
Alias choice(5)  = ch_sonic_height
Alias choice(6)  = ch_site_declin
Alias choice(7)  = ch_site_rufness
Alias choice(8)  = ch_site_fetch_N
Alias choice(9)  = ch_site_fetch_E
Alias choice(10) = ch_site_fetch_S
Alias choice(11) = ch_site_fetch_W

Public settings(NUM_SETTINGS)
Alias settings(1)  = dband_mult
Alias settings(2)  = dband_min
Alias settings(3)  = dband_def
Alias settings(4)  = sonic_azimuth
Alias settings(5)  = sonic_height
Alias settings(6)  = site_declin
Alias settings(7)  = site_rufness
Alias settings(8)  = site_fetch_N
Alias settings(9)  = site_fetch_E
Alias settings(10) = site_fetch_S
Alias settings(11) = site_fetch_W
'HINT define units despite non-Public b/c many are saved to `info` table
Units dband_mult = ratio
Units dband_min = m/s
Units dband_def = m/s
Units sonic_azimuth = degEofN
Units sonic_height = m
Units site_rufness = m
Units site_declin = degEofTN
Units site_fetch_N = m
Units site_fetch_E = m
Units site_fetch_S = m
Units site_fetch_W = m


'============================ DATA TABLES ===================================
DataTable(ts_fast,True,1000) 'FIXME - # records
  DataInterval(0,FAST_INTV,msec,10)
  CardOut(STOPFULL,10*60*60*4) '4 hours, FIXME
  
  Sample(1,sonic_Ux,IEEE4) 'TODO - FP2? only reported to two decimal places
  Sample(1,sonic_Uy,IEEE4)
  Sample(1,sonic_Uz,IEEE4)
  Sample(1,sonic_Ts,IEEE4)
  Sample(1,sonic_diag,IEEE4)
EndTable

DataTable(ts_slow,True,1000) 'FIXME - # records
  DataInterval(0,SLOW_INTV,sec,10)
  CardOut(STOPFULL,1000) 'FIXME - # records
  
  Sample(1,hmp_T,IEEE4)
  Sample(1,hmp_RH,IEEE4)
  Sample(1,press_can_UP,IEEE4)
  Sample(1,press_can_DN,IEEE4)
  Sample(1,press_pump_UP,IEEE4)
  Sample(1,press_pump_DN,IEEE4)
  Sample(1,press_baro,IEEE4)
EndTable

DataTable(work,True,2)
  DataInterval(0,STATS_INTV,Min,1)
  Average(1,sonic_Ux,IEEE4,disable_sonic)
  Average(1,sonic_Uy,IEEE4,disable_sonic)
  Average(1,sonic_Uz,IEEE4,disable_sonic)
  Average(1,sonic_Ts,IEEE4,disable_sonic)
  Covariance(4,cov_sonic(1,1),IEEE4,disable_sonic,10)
  WindVector(1,-1*sonic_Uy,sonic_Ux,IEEE4,disable_sonic,0,1,2)
  Average(1,hmp_T,IEEE4,(inbetween_slow_scan OR hmp_T=NAN))
  Average(1,hmp_e,IEEE4,(inbetween_slow_scan OR hmp_e=NAN))
EndTable

DataTable(stats,True,1000) 'FIXME - # records
  DataInterval(0,STATS_INTV,Min,10)
  CardOut(STOPFULL,1000) 'FIXME - # records

  Average(1,sonic_Ts,FP2,disable_sonic or sonic_Ts=NAN)
  StdDev (1,sonic_Ts,FP2,disable_sonic)
  StdDev (1,sonic_Uz,FP2,disable_sonic) 'TODO ? replace this with Uz_Std?
  Sample (1,sonic_WS_sclr_Avg,FP2)
  Sample (1,sonic_WS_rslt_Avg,FP2)
  Sample (1,sonic_WD_rslt_Avg,FP2)
  Sample (1,sonic_WD_csi_Std,FP2)
  
  Sample (1,hmp_T_Avg,FP2)
  Sample (1,hmp_RH_Avg,FP2)
  Sample (1,hmp_e_Avg,FP2)
  
  Average(1,press_can_UP,IEEE4,(inbetween_slow_scan OR press_can_UP=NAN))
  Average(1,press_can_DN,IEEE4,(inbetween_slow_scan OR press_can_DN=NAN))
  Average(1,press_pump_UP,IEEE4,(inbetween_slow_scan OR press_pump_UP=NAN))
  Average(1,press_pump_DN,IEEE4,(inbetween_slow_scan OR press_pump_DN=NAN))
  Average(1,press_baro,IEEE4,(inbetween_slow_scan OR press_baro=NAN))
  
  Sample(1,Uz_Std,IEEE4)
  Sample(1,W_Std,IEEE4)
  Sample(1,eta,IEEE4)
  Sample(1,theta,IEEE4)
EndTable

DataTable(gps_daily,TRUE,30)
  DataInterval (0,1,Day,10)
  CardOut(STOPFULL,150)
  Median(1,(lat_deg + lat_min/60),GPS_MED_NUM,IEEE4,(lat_deg=NAN OR lat_min=NAN))
    FieldNames("latitude_Med")
    Units latitude_Med = degN
  Median(1,(long_deg + long_min/60),GPS_MED_NUM,IEEE4,(long_deg=NAN OR long_min=NAN))
    FieldNames("longitude_Med")
    Units longitude_Med = degE
  Median(1,mag_var,GPS_MED_NUM,FP2,mag_var=NAN)
  Average(1,num_sat,FP2,num_sat=NAN)
  Median(1,altitude,GPS_MED_NUM,IEEE4,altitude=NAN)
  Average(1,altitude,FP2,altitude=NAN)
  Minimum(1,gps_ready,FP2,gps_ready=NAN,0)
  Sample(1,max_clock_change,UINT2)
  Sample(1,num_clock_change,UINT2)
EndTable

DataTable(info,True,50)
  'CardOut() TODO
  Sample(1,dband_mult,FP2)
    FieldNames("deadband_mult")
  Sample(1,dband_min,FP2)
    FieldNames("deadband_min")
  Sample(1,dband_def,FP2)
    FieldNames("deadband_default")
  Sample(1,sonic_azimuth,FP2)
  Sample(1,sonic_height,FP2)
  Sample(1,site_declin,FP2)
    FieldNames("site_mag_declin")
  Sample(1,site_rufness,FP2)
    FieldNames("Site_roughness")
  Sample(1,site_fetch_N,FP2)
  Sample(1,site_fetch_E,FP2)
  Sample(1,site_fetch_S,FP2)
  Sample(1,site_fetch_W,FP2)
  Sample(1,Status.CompileResults,String)
    FieldNames("CompileResults")
  Sample(1,Status.CardStatus,String)
    FieldNames("CardStatus")
  Sample(1,Status.RunSignature,UINT2)
    FieldNames("RunSig")
  Sample(1,Status.ProgSignature,UINT2)
    FieldNames("ProgSig")
  Sample(1,VERSION,String)
    FieldNames("GitRepoTag")
EndTable  


'============================= CUSTOM MENUS =================================
Const Yes = True
Const Cancel = False
Dim save_settings As Boolean
Dim discard_settings As Boolean
Dim reset_settings As Boolean
Dim recompile As Boolean

DisplayMenu("LT REA DAQ", -1)
  MenuItem("Sampling?", is_running)
    MenuPick(False, True)

  SubMenu("Settings")
    SubMenu("Deadband")
      MenuItem("Multiplier", ch_dband_mult)
      MenuItem("Minimum, m/s", ch_dband_min)
      MenuItem("Default, m/s", ch_dband_def)
    EndSubMenu
    SubMenu("Site & sensors")
      MenuItem("Sonic azimuth", ch_sonic_azimuth)
      MenuItem("Sonic height", ch_sonic_height)
      MenuItem("Mag. declin.", ch_site_declin)
      MenuItem("Roughness length", ch_site_rufness)
      MenuItem("Max fetch N", ch_site_fetch_N)
      MenuItem("Max fetch E", ch_site_fetch_E)
      MenuItem("Max fetch S", ch_site_fetch_S)
      MenuItem("Max fetch W", ch_site_fetch_W)
    EndSubMenu
    SubMenu("Apply/cancel")
      MenuItem("Save now?", save_settings)
        MenuPick(Cancel, Yes)
      MenuItem("Discard?", discard_settings)
        MenuPick(Cancel, Yes)
      MenuItem("Set default?", reset_settings)
        MenuPick(Cancel, Yes)
    EndSubMenu
  EndSubMenu

  SubMenu("Initial setup")
    MenuItem("Time zone", UTC_OFFSET)
      MenuPick(UTC_OFFSET,-8,-7,-6,-5,-4) 'FIXME: not valid outside USA
    MenuRecompile("Apply now?", recompile)
      MenuPick(Cancel,Yes)
  EndSubMenu
EndMenu


'============================= SUBROUTINES ==================================
Sub update_deadband() 'FIXME TODO
  If (deadband=NAN OR Uz_Std=NAN OR Uz_Std=0) Then
    deadband = dband_def
  Else
    deadband = dband_mult * Uz_Std
  EndIf
  If (deadband < dband_min) Then deadband = dband_min
  neg_deadband = -1*deadband
EndSub

Sub set_default_choices() '-------------------------------------------------
  ch_dband_mult = DEF_DBAND_MULT
  ch_dband_min = DEF_DBAND_MIN
  ch_dband_def = DEF_DBAND_DEF
  ch_sonic_azimuth = DEF_SONIC_AZIMUTH
  ch_sonic_height = DEF_SONIC_HEIGHT
  ch_site_declin = DEF_SITE_DECLIN
  ch_site_rufness = DEF_SITE_RUFNESS
  ch_site_fetch_N = DEF_SITE_FETCH_N
  ch_site_fetch_E = DEF_SITE_FETCH_E
  ch_site_fetch_S = DEF_SITE_FETCH_S
  ch_site_fetch_W = DEF_SITE_FETCH_W
EndSub

Sub populate_choices()
  Move(choice(1),NUM_SETTINGS,settings(1),NUM_SETTINGS)
EndSub

Sub save_current_choices()
  'HINT treat azimuth differently since 0 is valid option
  If (ch_sonic_azimuth < 0) Then
    ch_sonic_azimuth = -1
    azimuth = 0
  Else
    ch_sonic_azimuth = ch_sonic_azimuth MOD 360
    azimuth = sonic_azimuth
  EndIf

  If (ch_sonic_height < 0) Then (ch_sonic_height = 0)
  If (ch_site_declin < DECLIN_MIN) Then (ch_site_declin = DECLIN_MIN)
  If (ch_site_declin > DECLIN_MAX) Then (ch_site_declin = DECLIN_MAX)
  If (ch_site_fetch_N < 0) Then (ch_site_fetch_N = 0)
  If (ch_site_fetch_E < 0) Then (ch_site_fetch_E = 0)
  If (ch_site_fetch_S < 0) Then (ch_site_fetch_S = 0)
  If (ch_site_fetch_W < 0) Then (ch_site_fetch_W = 0)
  If (ch_site_rufness < 0) Then (ch_site_rufness = 0)

  'HINT order matters when validating dband settings!
  If (ch_dband_min < 0) Then (ch_dband_min = 0)
  If (ch_dband_def < ch_dband_min) Then (ch_dband_def = ch_dband_min)
  If (ch_dband_mult > DBMULT_MAX) Then (ch_dband_mult = DBMULT_MAX)
  If (ch_dband_mult < 0 OR (ch_dband_mult = 0 AND ch_dband_min > 0)) Then
    ch_dband_mult = DEF_DBAND_MULT
  EndIf

  Move(settings(1),NUM_SETTINGS,choice(1),NUM_SETTINGS)
  Calfile(settings,NUM_SETTINGS,SETTINGS_FILE,WRITEFILE)

  update_deadband()
EndSub

Sub load_settings()
  filehandle = FileOpen(SETTINGS_FILE,"rb",0)
  FileClose(filehandle)
  If (filehandle=0) Then  'file not found
    set_default_choices()
  Else
    Calfile(settings,NUM_SETTINGS,SETTINGS_FILE,READFILE)
    populate_choices()
  EndIf
  save_current_choices()
EndSub

Sub setdefault_settings()
  FileManage(SETTINGS_FILE,8) 'delete file
  load_settings()
EndSub

Sub reset_rotangles() '-----------------------------------------------------
  Move(rot_angles(1),6,0,1)
  CT = 1.0
EndSub

Sub setup() 
  reset_rotangles() 'TODO retain rotation angles across power cycles
  deadband = NAN 'caught in update_deadband(), invoked within load_settings()
  load_settings()
  CallTable(info)
  
  SerialOpen(SONIC_COM,SONIC_BAUD,SONIC_FORMAT,0,SONIC_BUFF)
  PortSet(SW12_CAN_P,True)
  PortSet(SW12_PMP_P,True)
EndSub

'============================== PROGRAM =====================================
BeginProg
  setup()
  
  Scan(FAST_INTV,msec,FAST_BUFF,0)
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    PortSet(CTRL_PUMPS,is_running)
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

    SerialInRecord(SONIC_COM,sonic_record,0,SONIC_RECLEN,&h0D,sonic_bytes,11)
    SplitStr(sonic(1),sonic_record,0,5,0)
    disable_sonic = (sonic_diag > 0 OR sonic_diag=NAN OR sonic_Ts=NAN OR _
                                sonic_Ux=NAN OR sonic_Uy=NAN or sonic_Uz=NAN)
    Uz_rot = sonic_Uz*CT - sonic_Uz*ST*CE - sonic_Uy*ST*SE
    vlv_up_ON = False
    vlv_dn_ON = False
    If (NOT is_running) Then
      'do nothing
    ElseIf (Uz_rot >= deadband) Then
      vlv_up_ON = True
    ElseIf (Uz_rot <= neg_deadband) Then
      vlv_dn_ON = True
    EndIf
    PortSet(CTRL_VLV_UP,vlv_up_ON) 'HINT use PortSet (measurment task) not
    PortSet(CTRL_VLV_DN,vlv_dn_ON) 'WriteIO (processing task = delayed)

    CallTable(ts_fast)
    CallTable(work)
    If (work.Output(1,1)) Then
      GetRecord(work_out(1),work,1)

      sqrt_UV = SQR(Ux_Avg^2 + Uy_Avg^2)
      sqrt_UVW = SQR(Ux_Avg^2 + Uy_Avg^2 + Uz_Avg^2)
      CE = Ux_Avg/sqrt_UV
      SE = Uy_Avg/sqrt_UV
      CT = sqrt_UV/sqrt_UVW
      ST = Uz_Avg/sqrt_UVW
      If (CE=NAN OR SE=NAN OR CT=NAN OR ST=NAN) Then
        reset_rotangles()
      Else
        eta = ATN2(SE,CE)*180/PI
        theta = ATN2(ST,CT)*180/PI
      EndIf
      U_Avg = Ux_Avg*CT*CE + Uy_Avg*CT*SE + Uz_Avg*ST
      V_Avg = Uy_Avg*CE - Ux_Avg*SE
      W_Avg = Uz_Avg*CT - Ux_Avg*ST*SE - Uy_Avg*ST*SE
      'HINT in following line *_Std values are still covariances
      W_Std = SQR(Uz_Std*CT*CT + Ux_Std*ST*ST*CE*CE + Uy_Std*ST*ST*SE*SE - 2*cov_Uy_Uz*CT*ST*SE + 2*cov_Ux_Uy*CE*ST*ST*SE)
      'now convert cov -> std
      Uz_Std = SQR(Uz_Std)
      Ts_Std = SQR(Ts_Std)
      
      update_deadband()

      If (sonic_WS_sclr_Avg = NAN AND sonic_WS_rslt_Avg = NAN) Then
        sonic_WD_rslt_Avg = NAN
        sonic_WD_csi_Std = NAN
      Else
        sonic_WD_rslt_Avg = (Round(sonic_WD_rslt_Avg,0)+sonic_azimuth) MOD 360
      EndIf
      
      SatVP(hmp_e_sat_Avg, hmp_T_Avg)
      hmp_RH_Avg = 100*hmp_e_Avg/hmp_e_sat_Avg
      'DewPoint(hmp_Tdew_Avg, hmp_T_Avg, hmp_RH_Avg) 'TODO ????
    EndIf
    CallTable(stats)

    If (save_settings) Then
      save_current_choices()
      save_settings = Cancel
      CallTable(info)
    ElseIf (discard_settings) Then
      populate_choices()
      discard_settings = Cancel
    ElseIf (reset_settings) Then
      setdefault_settings()
      reset_settings = Cancel
      CallTable(info)
    EndIf

    inbetween_slow_scan = True
    If (just_had_slow_scan) Then
      just_had_slow_scan = False
      inbetween_slow_scan = False
    EndIf
  NextScan

  SlowSequence
  Scan(SLOW_INTV,sec,3,0)
    VoltDiff(hmp_T,1,mv1000,HMP_T_DF,True,0,INTEG,HMP_T_MULT,HMP_T_OFF)
    VoltDiff(hmp_RH,1,mv1000,HMP_RH_DF,True,0,INTEG,HMP_RH_MULT,HMP_RH_OFF)
    VaporPressure(hmp_e, hmp_T, hmp_RH)

    VoltSe(press_can_UP,1,mv5000,P_CAN_UP_SE,True,0,INTEG, P_CAN_UP_MLT,P_CAN_UP_OFF)
    VoltSe(press_can_DN,1,mv5000,P_CAN_DN_SE,True,0,INTEG, P_CAN_DN_MLT,P_CAN_DN_OFF)
    VoltSe(press_pump_UP,1,mv5000,P_PMP_UP_SE,True,0,INTEG, P_PMP_UP_MLT,P_PMP_UP_OFF)
    VoltSe(press_pump_DN,1,mv5000,P_PMP_DN_SE,True,0,INTEG, P_PMP_DN_MLT,P_PMP_DN_OFF)
    VoltSe(press_baro,1,mv5000,P_BARO_SE,True,0,INTEG, P_BARO_MLT,P_BARO_OFF)

    CallTable(ts_slow)
    just_had_slow_scan = True
  NextScan

  SlowSequence
  Scan(GPS_INTV,sec,1,0)
    GPS(gps16x(1),GPS_COM,UTC_OFFSET*3600,GPS_MAX_DIFF,nmea_str(1))
    CallTable(gps_daily)
  NextScan
EndProg

