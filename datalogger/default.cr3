''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Long-term canister-based trace gas flux measurement system
' using the Relaxed Eddy Accumulation (REA) technique
'
' Laboratory for Atmospheric Research
' Department of Civil & Environmental Engineering
' Washington State University
'
' Licensed under the terms of The MIT License
'
' Contact:  Patrick O'Keeffe <pokeeffe@wsu.edu>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'manually update this constant with results of `git describe` prior to
'deployment but do not check-in file with any value other than empty string
Const VERSION = ""

'========================= DEFAULT SETTINGS =================================
ConstTable
  Const UTC_OFFSET = -8 'Pacific Standard Time
  Const DAYS_OF_DATA = 2 'to keep test data files sane sizes
  Const WDFILT_TIME = 5 'min
  Const RHFILT_TIME = 5 'min
  Const FILT_INTV = 15 'seconds

  'not appropriate for PickList so not available in Initial Setup custom menu
  Const MARGIN_MIN = 5 '%
  Const MARGIN_MAX = 25 '%
  Const PUMP_SF = 0.9 'ratio
  Const DECLIN_MIN = -35 'deg E of TN
  Const DECLIN_MAX = 35 'deg E of TN
  Const DBMULT_MAX = 2 'ratio
  Const RHFILT_MIN = 70 '%
  Const PRESS_RUNAVG = 5 'seconds (# slow intv.)
EndConstTable


'============================== WIRING ======================================
Const SONIC_COM = Com4 'C7/C8
Const GPS_COM = Com3   'C5/C6

Const HMP_T_DF = 10
Const HMP_RH_DF = 11

Const CTRL_VLV_UP = 1 'C1
Const CTRL_VLV_DN = 2 'C2
'reserved              C3
Const CTRL_PUMPS  = 4 'C4

Const P_BARO_SE   = 15
Const P_CAN_UP_SE = 25
Const P_CAN_DN_SE = 26
Const P_PMP_UP_SE = 27
Const P_PMP_DN_SE = 28

Const SW12_CAN_P = 9  'SW12-1
Const SW12_PMP_P = 10 'SW12-2


'============================ CONSTANTS =====================================
Const MBAR_PER_PSI = 68.947573 'mbar/psia
Const MBAR_PER_INHG = 33.864882 'mbar/inHg
Const PI = 3.14159
Const DperR = 180/PI
Const CRITICAL_RATIO = 0.528

Const INTEG = 250     'analog integration time
Const FAST_INTV = 100 'milliseconds, scan freq.
Const FAST_BUFF = 10 
Const SLOW_INTV = 1   'seconds, scan freq.
Const SLOW_BUFF = 5
Const STATS_INTV = 5 'minutes, stats output
Const STOPFULL = 1    'stop recording when tables are full
Const WDFILT_RUNAVG = (1000/FAST_INTV)*60*WDFILT_TIME
Const RHFILT_RUNAVG = (60/SLOW_INTV)*RHFILT_TIME

Const RUN_TIMER = 1
Const START = 0
Const STOP = 1
Const STOP_RESET = 3

Const SONIC_RECLEN = 34 'characters per record
Const SONIC_BAUD = 38400
Const SONIC_FORMAT = 3 '8/N/1 @ RS-232 voltages without PakBus pass-thru
Const SONIC_BUFF = SONIC_RECLEN*2 + 1
Const SONIC_VAZ = 0 'device-specific value, offset of device azimuth

Const HMP_T_OFF   = -80
Const HMP_T_MULT  = (60 - HMP_T_OFF)/1000 '-80 to +60 *C over 1V
Const HMP_RH_OFF  = 0
Const HMP_RH_MULT = (100 - HMP_RH_OFF)/1000 '0-100% over 1V

Const P_BARO_OFF = MBAR_PER_INHG*16
Const P_BARO_MLT = (MBAR_PER_INHG*32 - P_BARO_OFF)/5000 '16-32 inHg over 5Vdc

Const P_CAN_UP_OFF = MBAR_PER_PSI*0
Const P_CAN_UP_MLT = (MBAR_PER_PSI*30 - P_CAN_UP_OFF)/5000 '0-30 psia over 5Vdc
Const P_CAN_DN_OFF = P_CAN_UP_OFF
Const P_CAN_DN_MLT = P_CAN_UP_MLT

Const P_PMP_UP_OFF = MBAR_PER_PSI*0
Const P_PMP_UP_MLT = (MBAR_PER_PSI*15 - P_PMP_UP_OFF)/5000 '0-15 psia over 5Vdc
Const P_PMP_DN_OFF = P_PMP_UP_OFF
Const P_PMP_DN_MLT = P_PMP_UP_MLT

Const GPS_INTV = 1 'minutes, scan freq.
Const GPS_MAX_DIFF = 25 'msec, clock tolerance
Const GPS_MED_NUM = 1440/GPS_INTV 'max # of values included in median calc


'============================= VARIABLES ====================================
Dim sonic_bytes
Dim sonic_record As String * SONIC_RECLEN
Public sonic(5)
Alias sonic(1) = sonic_Ux
Alias sonic(2) = sonic_Uy
Alias sonic(3) = sonic_Uz
Alias sonic(4) = sonic_Ts
Alias sonic(5) = sonic_diag
Units sonic = m/s
Units sonic_Ts = degC
Units sonic_diag = arb

Public disable_sonic As Boolean
Public sonic_azimuth = {0}

Public hmp(3)
Alias hmp(1) = hmp_T
Alias hmp(2) = hmp_RH
Alias hmp(3) = hmp_e
Units hmp_T = degC
Units hmp_RH = %
Units hmp_e = kPa

Public pressure(5)
Alias pressure(1) = press_can_UP
Alias pressure(2) = press_can_DN
Alias pressure(3) = press_pump_UP
Alias pressure(4) = press_pump_DN
Alias pressure(5) = press_baro
Units pressure = mbar

Dim nmea_str(2) As String * 90
Public gps16x(15)
Alias gps16x(1)  = lat_deg        '(+)=North, (-)=South
Alias gps16x(2)  = lat_min
Alias gps16x(3)  = long_deg       '(+)=East, (-)=West
Alias gps16x(4)  = long_min
Alias gps16x(5)  = speed
Alias gps16x(6)  = course
Alias gps16x(7)  = mag_var        '(+)=East, (-)=West
Alias gps16x(8)  = fix_quality
Alias gps16x(9)  = num_sat
Alias gps16x(10) = altitude
Alias gps16x(11) = since_pps
Alias gps16x(12) = since_gprmc
Alias gps16x(13) = gps_ready
Alias gps16x(14) = max_clock_change
Alias gps16x(15) = num_clock_change
Units speed = m/s
Units course = degEofN
Units mag_var = degEofN
Units fix_quality = unitless
Units num_sat = count
Units altitude = m
Units since_pps = ms
Units since_gprmc = s
Units max_clock_change = ms
Units num_clock_change = occurrences

'-------------------------- PROCESSING -------------------------------------
Public cov_sonic(1,4) '= [ [Ts, Ux, Uy, Uz] ]
Public cov_rotate(1,2) '= [ [Ts, Uz_rot] ]
Public cov_rea(1,3) '= [ [Ts, Uz, Uz_rot] ]

Public work_out(31)
Alias work_out(1)  = Ux_Avg '4x Average()
Alias work_out(2)  = Uy_Avg
Alias work_out(3)  = Uz_Avg
Alias work_out(4)  = Ts_Avg
Alias work_out(5)  = Ts_Std 'Covariance(), 10 vals
Alias work_out(6)  = cov_Ts_Ux
Alias work_out(7)  = cov_Ts_Uy
Alias work_out(8)  = cov_Ts_Uz
Alias work_out(9)  = Ux_Std
Alias work_out(10) = cov_Ux_Uy
Alias work_out(11) = cov_Ux_Uz
Alias work_out(12) = Uy_Std
Alias work_out(13) = cov_Uy_Uz
Alias work_out(14) = Uz_Std
'Alias work_out(15) = Ts_Std (duplicate) 'Covariance(), 3 vals
Alias work_out(16) = cov_Ts_Uz_rot
Alias work_out(17) = Uz_rot_Std
Alias work_out(18) = sonic_WS_sclr_Avg 'WindVector, 4 vals
Alias work_out(19) = sonic_WS_rslt_Avg
Alias work_out(20) = sonic_WD_rslt_Avg
Alias work_out(21) = sonic_WD_csi_Std
Alias work_out(22) = hmp_T_Avg '4x Average()
Alias work_out(23) = hmp_e_Avg
Alias work_out(24) = rea_Ts_up_Avg
Alias work_out(25) = rea_Ts_dn_Avg
Alias work_out(26) = vlv_up_ON_Tot '3x Totalize()
Alias work_out(27) = vlv_dn_ON_Tot
Alias work_out(28) = vlv_possible
Alias work_out(29) = unfilt_vlv_up_ON_Tot
Alias work_out(30) = unfilt_vlv_dn_ON_Tot
Alias work_out(31) = unfilt_vlv_possible
Units Ux_Avg = m/s
Units Uy_Avg = m/s
Units Uz_Avg = m/s
Units Ts_Avg = degC
Units Ts_Std = degC
Units Uz_Std = m/s
Units Uz_rot_Std = m/s
Units sonic_WS_sclr_Avg = m/s
Units sonic_WS_rslt_Avg = m/s
Units sonic_WD_rslt_Avg = degEofTN
Units sonic_WD_csi_Std = degrees
Units hmp_T_Avg = degC
Units hmp_e_Avg = kPa
Units rea_Ts_up_Avg = degC
Units rea_Ts_dn_Avg = degC
Units vlv_up_ON_Tot = scans
Units vlv_dn_ON_Tot = scans
Units vlv_possible = scans
Units unfilt_vlv_up_ON_Tot = scans
Units unfilt_vlv_dn_ON_Tot = scans
Units unfilt_vlv_possible = scans

Public rea_out(14)
Alias rea_out(1)  = Ts_Std2 'Covariance(), 6 vals
Alias rea_out(2)  = cov_Ts_Uz2
Alias rea_out(3)  = cov_Ts_Uz_rot2
Alias rea_out(4)  = Uz_Std2
Alias rea_out(5)  = cov_Uz_Uz_rot2
Alias rea_out(6)  = Uz_rot_Std2
Alias rea_out(7)  = rea_Ts_up_Avg2 '2x Average()
Alias rea_out(8)  = rea_Ts_dn_Avg2
Alias rea_out(9)  = vlv_up_ON_Tot2 '3x Totalize()
Alias rea_out(10) = vlv_dn_ON_Tot2
Alias rea_out(11) = vlv_possible2
Alias rea_out(12) = unfilt_vlv_up_ON_Tot2 '3x Totalize()
Alias rea_out(13) = unfilt_vlv_dn_ON_Tot2
Alias rea_out(14) = unfilt_vlv_possible2
Units Ts_Std2 = degC
Units Uz_Std2 = m/s
Units Uz_rot_Std2 = m/s
Units rea_Ts_up_Avg2 = degC
Units rea_Ts_dn_Avg2 = degC
Units vlv_up_ON_Tot2 = scans
Units vlv_dn_ON_Tot2 = scans
Units vlv_possible2 = scans
Units unfilt_vlv_up_ON_Tot2 = scans
Units unfilt_vlv_dn_ON_Tot2 = scans
Units unfilt_vlv_possible2 = scans

Public Uz_rot 'real-time coordinate-rotated
Units Uz_rot = m/s

Dim sqrt_UV
Dim sqrt_UVW
Public rot_angles(6)
Alias rot_angles(1) = CE
Alias rot_angles(2) = SE
Alias rot_angles(3) = CT
Alias rot_angles(4) = ST
Alias rot_angles(5) = eta
Alias rot_angles(6) = theta
Units eta = degrees
Units theta = degrees

Public rotated(4) 'stream-wise coordinates
Alias rotated(1) = U_Avg
Alias rotated(2) = V_Avg
Alias rotated(3) = W_Avg
Alias rotated(4) = W_Std
Units rotated = m/s

Public derived(2)
Alias derived(1) = hmp_e_sat_Avg
Alias derived(2) = hmp_RH_Avg
Units hmp_e_sat_Avg = kPa
Units hmp_RH_Avg = %

Public rea_sim(3)
Alias rea_sim(1) = rea_Ts_up
Alias rea_sim(2) = rea_Ts_dn
Alias rea_sim(3) = delta_Ts
Units rea_sim = degC

Public beta(3)
Alias beta(1) = beta_Ts_Uz
Alias beta(2) = beta_Ts_Uz_rot
Alias beta(3) = beta_Ts_W
Units beta = dimless

Public vlv_fraction(5)
Alias vlv_fraction(1) = vlv_up_fraction
Alias vlv_fraction(2) = vlv_dn_fraction
Alias vlv_fraction(3) = unfilt_vlv_up_fraction
Alias vlv_fraction(4) = unfilt_vlv_dn_fraction
Alias vlv_fraction(5) = fraction_filtered_out
Units vlv_fraction = ratio

Public run_means(12)
Alias run_means(1)  = mean_can_UP
Alias run_means(2)  = mean_can_DN
Alias run_means(3)  = mean_pump_UP
Alias run_means(4)  = mean_pump_DN
Alias run_means(5)  = mean_baro
Alias run_means(6)  = mean_Ux
Alias run_means(7)  = mean_Uy
Alias run_means(8)  = mean_WD
Alias run_means(9)  = mean_WS
Alias run_means(10) = mean_RH
Units run_means = mbar
Units mean_Ux = m/s
Units mean_Uy = m/s
Units mean_WD = degEofTN
Units mean_WS = m/
Units mean_RH = %

'----------------------------- OPERATION -----------------------------------
Public deadband
Dim neg_deadband
Units deadband = m/s

Public azimuth
Units azimuth = degEofTN

Public vlv_status
Public vlv_ON(2) As Boolean
Alias vlv_ON(1) = vlv_up_ON
Alias vlv_ON(2) = vlv_dn_ON

Public elapsed_time As Long
Units elapsed_time = min

Public is_running As Boolean
Public cans_full As Boolean
Public pump_fault As Boolean

Dim can_fill_margin
Public max_can_press
Public max_pump_press

Public wait_flag As Boolean
Public poor_condition_flags(2) As Boolean
Alias poor_condition_flags(1) = poor_WD
Alias poor_condition_flags(2) = poor_RH

Dim run_queued As Boolean
Dim run_aborted As Boolean
Dim rea_finished As Boolean 'OpenInterval trigger var
Dim just_had_slow_scan As Boolean
Dim inbetween_slow_scan As Boolean


'========================= SETTINGS RETENTION ===============================
Dim filehandle As Long
Const WRITEFILE = 0
Const READFILE = 1

'----- DEFAULT SETTINGS -----
Const SETTINGS_FILE = "CPU:rea_settings.dat"
Const NUM_SETTINGS = {15}

Const DEF_DBAND_MULT = 0.85 '0 < X <= 1
Const DEF_DBAND_MIN = 0.05 'm/s
Const DEF_DBAND_DEF = 0.1 'm/s
Const DEF_SONIC_AZIMUTH = -1 'degEofN, -1=disabled
Const DEF_SONIC_HEIGHT = 0 'm, 0=disabled
Const DEF_SITE_DECLIN = 0 'degEofTN, 0=disabled
Const DEF_SITE_RUFNESS = 0 'm, 0=disabled
Const DEF_SITE_FETCH_N = 0 'm, 0=disabled
Const DEF_SITE_FETCH_E = 0 'm, 0=disabled
Const DEF_SITE_FETCH_S = 0 'm, 0=disabled
Const DEF_SITE_FETCH_W = 0 'm, 0=disabled
Const DEF_FILL_MARGIN = 10 '%
Const DEF_WDFILT_MIN = 0 'deg E of TN
Const DEF_WDFILT_MAX = 359 'deg E of TN 
Const DEF_RHFILT_MAX = 90 '%

Dim choice(NUM_SETTINGS)
Alias choice(1)  = ch_dband_mult
Alias choice(2)  = ch_dband_min
Alias choice(3)  = ch_dband_def
Alias choice(4)  = ch_sonic_azimuth
Alias choice(5)  = ch_sonic_height
Alias choice(6)  = ch_site_declin
Alias choice(7)  = ch_site_rufness
Alias choice(8)  = ch_site_fetch_N
Alias choice(9)  = ch_site_fetch_E
Alias choice(10) = ch_site_fetch_S
Alias choice(11) = ch_site_fetch_W
Alias choice(12) = ch_fill_margin
Alias choice(13) = ch_wdfilt_min
Alias choice(14) = ch_wdfilt_max
Alias choice(15) = ch_rhfilt_max

Public settings(NUM_SETTINGS)
Alias settings(1)  = dband_mult
Alias settings(2)  = dband_min
Alias settings(3)  = dband_def
Alias settings(4)  = sonic_azimuth
Alias settings(5)  = sonic_height
Alias settings(6)  = site_declin
Alias settings(7)  = site_rufness
Alias settings(8)  = site_fetch_N
Alias settings(9)  = site_fetch_E
Alias settings(10) = site_fetch_S
Alias settings(11) = site_fetch_W
Alias settings(12) = fill_margin
Alias settings(13) = wdfilt_min
Alias settings(14) = wdfilt_max
Alias settings(15) = rhfilt_max
'HINT define units despite non-Public b/c many are saved to `info` table
Units dband_mult = ratio
Units dband_min = m/s
Units dband_def = m/s
Units sonic_azimuth = degEofN
Units sonic_height = m
Units site_rufness = m
Units site_declin = degEofTN
Units site_fetch_N = m
Units site_fetch_E = m
Units site_fetch_S = m
Units site_fetch_W = m
Units fill_margin = %
Units wdfilt_min = degEofTN
Units wdfilt_max = defEofTN
Units rhfilt_max = %


'============================ DATA TABLES ===================================
DataTable(work,True,2)
  DataInterval(0,STATS_INTV,Min,1)
  Average(1,sonic_Ux,IEEE4,disable_sonic)
  Average(1,sonic_Uy,IEEE4,disable_sonic)
  Average(1,sonic_Uz,IEEE4,disable_sonic)
  Average(1,sonic_Ts,IEEE4,disable_sonic)
  Covariance(4,cov_sonic(1,1),IEEE4,disable_sonic,10)
  Covariance(2,cov_rotate(1,1),IEEE4,disable_sonic,3)
  WindVector(1,-1*sonic_Uy,sonic_Ux,IEEE4,disable_sonic,0,1,2)
  Average(1,hmp_T,IEEE4,(inbetween_slow_scan OR hmp_T=NAN))
  Average(1,hmp_e,IEEE4,(inbetween_slow_scan OR hmp_e=NAN))
  Average(1,rea_Ts_up,IEEE4,rea_Ts_up=NAN)
  Average(1,rea_Ts_dn,IEEE4,rea_Ts_dn=NAN)
  Totalize(1,1,UINT4,NOT vlv_up_ON OR vlv_up_ON=NAN OR wait_flag)
  Totalize(1,1,UINT4,NOT vlv_dn_ON OR vlv_dn_ON=NAN OR wait_flag)
  Totalize(1,1,UINT4,wait_flag)
  Totalize(1,1,UINT4,NOT vlv_up_ON OR vlv_up_ON=NAN)
  Totalize(1,1,UINT4,NOT vlv_dn_ON OR vlv_dn_ON=NAN)
  Totalize(1,1,UINT4,False)
EndTable

DataTable(work_rea,rea_finished,10)
  OpenInterval
  Covariance(3,cov_rea(1,1),IEEE4,disable_sonic,6)
  Average(1,rea_Ts_up,IEEE4,rea_Ts_up=NAN)
  Average(1,rea_Ts_dn,IEEE4,rea_Ts_dn=NAN)
  Totalize(1,1,UINT4,NOT vlv_up_ON OR vlv_up_ON=NAN OR wait_flag)
  Totalize(1,1,UINT4,NOT vlv_dn_ON OR vlv_dn_ON=NAN OR wait_flag)
  Totalize(1,1,UINT4,wait_flag)
  Totalize(1,1,UINT4,NOT vlv_up_ON OR vlv_up_ON=NAN)
  Totalize(1,1,UINT4,NOT vlv_dn_ON OR vlv_dn_ON=NAN)
  Totalize(1,1,UINT4,False)
EndTable

DataTable(ts_fast,True,1000) '----------------- FINAL OUTPUTS ---------------
  DataInterval(0,FAST_INTV,msec,10) 'FIXME - previous line, # records
  CardOut(STOPFULL,DAYS_OF_DATA*864000/FAST_INTV)
  
  Sample(1,sonic_Ux,IEEE4) 'TODO - FP2? only reported to two decimal places
  Sample(1,sonic_Uy,IEEE4)
  Sample(1,sonic_Uz,IEEE4)
  Sample(1,sonic_Ts,IEEE4)
  Sample(1,sonic_diag,IEEE4)
  Sample(1,vlv_status,IEEE4)
EndTable

DataTable(ts_slow,True,1000) 'FIXME - # records
  DataInterval(0,SLOW_INTV,sec,10)
  CardOut(STOPFULL,DAYS_OF_DATA*86400/SLOW_INTV)
  
  Sample(1,hmp_T,IEEE4)
  Sample(1,hmp_RH,IEEE4)
  Sample(1,press_can_UP,IEEE4)
  Sample(1,press_can_DN,IEEE4)
  Sample(1,press_pump_UP,IEEE4)
  Sample(1,press_pump_DN,IEEE4)
  Sample(1,press_baro,IEEE4)
EndTable

DataTable(stats,True,1000) 'FIXME - # records
  DataInterval(0,STATS_INTV,Min,10)
  CardOut(STOPFULL,DAYS_OF_DATA*1440/STATS_INTV)

  Average(1,sonic_Ts,FP2,disable_sonic or sonic_Ts=NAN)
  StdDev (1,sonic_Ts,FP2,disable_sonic)
  StdDev (1,sonic_Uz,FP2,disable_sonic) 'TODO ? replace this with Uz_Std?
  Sample (1,sonic_WS_sclr_Avg,FP2)
  Sample (1,sonic_WS_rslt_Avg,FP2)
  Sample (1,sonic_WD_rslt_Avg,FP2)
  Sample (1,sonic_WD_csi_Std,FP2)
  
  Sample (1,hmp_T_Avg,FP2)
  Sample (1,hmp_RH_Avg,FP2)
  Sample (1,hmp_e_Avg,FP2)
  
  Average(1,press_can_UP,IEEE4,(inbetween_slow_scan OR press_can_UP=NAN))
  Average(1,press_can_DN,IEEE4,(inbetween_slow_scan OR press_can_DN=NAN))
  Average(1,press_pump_UP,IEEE4,(inbetween_slow_scan OR press_pump_UP=NAN))
  Average(1,press_pump_DN,IEEE4,(inbetween_slow_scan OR press_pump_DN=NAN))
  Average(1,press_baro,IEEE4,(inbetween_slow_scan OR press_baro=NAN))

  Sample(1,deadband,IEEE4)  
  Sample(1,eta,IEEE4)
  Sample(1,theta,IEEE4)  
  Sample(1,Uz_Std,IEEE4)
  Sample(1,Uz_rot_Std,IEEE4)
  Sample(1,W_Std,IEEE4)
  Sample(1,beta_Ts_Uz,IEEE4)
  Sample(1,beta_Ts_Uz_rot,IEEE4)
  Sample(1,beta_Ts_W,IEEE4)
  Sample(1,vlv_up_fraction,IEEE4)
  Sample(1,vlv_dn_fraction,IEEE4)
  Sample(1,unfilt_vlv_up_fraction,IEEE4)
  Sample(1,unfilt_vlv_dn_fraction,IEEE4)
  Sample(1,fraction_filtered_out,IEEE4)
EndTable

DataTable(rea,True,10)
  OpenInterval
  CardOut(1,100)
  Sample(1,Uz_Std,IEEE4)
  Sample(1,Uz_rot_Std,IEEE4)
  Sample(1,W_Std,IEEE4)
  Sample(1,beta_Ts_Uz,IEEE4)
  Sample(1,beta_Ts_Uz_rot,IEEE4)
  Sample(1,beta_Ts_W,IEEE4)
  Sample(1,vlv_up_fraction,IEEE4)
  Sample(1,vlv_dn_fraction,IEEE4)
  Sample(1,unfilt_vlv_up_fraction,IEEE4)
  Sample(1,unfilt_vlv_dn_fraction,IEEE4)
  Sample(1,fraction_filtered_out,IEEE4)
  Sample(1,elapsed_time,IEEE4)
    FieldNames("run_duration")
  'TODO starting pressures? ending pressures?
EndTable

DataTable(gps_daily,TRUE,30)
  DataInterval (0,1,Day,10)
  CardOut(STOPFULL,DAYS_OF_DATA)
  Median(1,(lat_deg + lat_min/60),GPS_MED_NUM,IEEE4,(lat_deg=NAN OR lat_min=NAN))
    FieldNames("latitude_Med")
    Units latitude_Med = degN
  Median(1,(long_deg + long_min/60),GPS_MED_NUM,IEEE4,(long_deg=NAN OR long_min=NAN))
    FieldNames("longitude_Med")
    Units longitude_Med = degE
  Median(1,mag_var,GPS_MED_NUM,FP2,mag_var=NAN)
  Average(1,num_sat,FP2,num_sat=NAN)
  Median(1,altitude,GPS_MED_NUM,IEEE4,altitude=NAN)
  Average(1,altitude,FP2,altitude=NAN)
  Minimum(1,gps_ready,FP2,gps_ready=NAN,0)
  Sample(1,max_clock_change,UINT2)
  Sample(1,num_clock_change,UINT2)
EndTable

DataTable(info,True,50)
  CardOut(STOPFULL,100)
  Sample(1,fill_margin,FP2)
    'TODO better name?
  Sample(1,dband_mult,FP2)
    FieldNames("deadband_mult")
  Sample(1,dband_min,FP2)
    FieldNames("deadband_min")
  Sample(1,dband_def,FP2)
    FieldNames("deadband_default")
  Sample(1,sonic_azimuth,FP2)
  Sample(1,sonic_height,FP2)
  Sample(1,site_declin,FP2)
    FieldNames("site_mag_declin")
  Sample(1,site_rufness,FP2)
    FieldNames("site_roughness")
  Sample(1,wdfilt_min,FP2)
    FieldNames("ok_wd_min")
  Sample(1,wdfilt_max,FP2)
    FieldNames("ok_wd_max")
  Sample(1,rhfilt_max,FP2)
    FieldNames("ok_rh_max")
  Sample(1,site_fetch_N,FP2)
  Sample(1,site_fetch_E,FP2)
  Sample(1,site_fetch_S,FP2)
  Sample(1,site_fetch_W,FP2)
  Sample(1,Status.CompileResults,String)
    FieldNames("CompileResults")
  Sample(1,Status.CardStatus,String)
    FieldNames("CardStatus")
  Sample(1,Status.RunSignature,UINT2)
    FieldNames("RunSig")
  Sample(1,Status.ProgSignature,UINT2)
    FieldNames("ProgSig")
  Sample(1,VERSION,String)
    FieldNames("GitRepoTag")
EndTable  


'============================= CUSTOM MENUS =================================
Const Yes = True
Const Cancel = False
Dim save_settings As Boolean
Dim discard_settings As Boolean
Dim reset_settings As Boolean
Dim recompile As Boolean

DisplayMenu("LT REA DAQ", -1)
  SubMenu("Status")
    DisplayValue("Sampling?", is_running)
    DisplayValue("Wait flag?", wait_flag)
    SubMenu("Flag details")
      DisplayValue("Poor WD", poor_WD)
      DisplayValue("Poor RH", poor_RH)
    EndSubMenu
    DisplayValue("Cans full?", cans_full)
    DisplayValue("Pump fail?", pump_fault)
  EndSubMenu

  SubMenu("Run control")
    MenuItem("Queue run", run_queued)
      MenuPick(Cancel, Yes)
    MenuItem("Abort run", run_aborted)
      MenuPick(Cancel, Yes)
  EndSubMenu

  SubMenu("Settings")
    SubMenu("Sampling")
      MenuItem("Fill margin, %", ch_fill_margin)
        MenuPick(5, 10, 15, 20, 25)
      MenuItem("Min WD, deg", ch_wdfilt_min)
      MenuItem("Max WD, deg", ch_wdfilt_max)
      MenuItem("Max RH, %", ch_rhfilt_max)
      MenuItem("Max fetch N, m", ch_site_fetch_N)
      MenuItem("Max fetch E, m", ch_site_fetch_E)
      MenuItem("Max fetch S, m", ch_site_fetch_S)
      MenuItem("Max fetch W, m", ch_site_fetch_W)
    EndSubMenu
    SubMenu("Deadband")
      MenuItem("Multiplier", ch_dband_mult)
      MenuItem("Minimum, m/s", ch_dband_min)
      MenuItem("Default, m/s", ch_dband_def)
    EndSubMenu
    SubMenu("Site & sensors")
      MenuItem("Sonic height, in", ch_sonic_height)
      MenuItem("Sonic azimuth, deg", ch_sonic_azimuth)
      MenuItem("Mag. declin., deg", ch_site_declin)
      MenuItem("Roughness length, in", ch_site_rufness)
    EndSubMenu
    SubMenu("Apply/cancel")
      MenuItem("Save now?", save_settings)
        MenuPick(Cancel, Yes)
      MenuItem("Discard?", discard_settings)
        MenuPick(Cancel, Yes)
      MenuItem("Set default?", reset_settings)
        MenuPick(Cancel, Yes)
    EndSubMenu
  EndSubMenu

  SubMenu("Initial setup")
    MenuItem("Time zone", UTC_OFFSET)
      MenuPick(UTC_OFFSET,-8,-7,-6,-5,-4) 'FIXME: not valid outside USA
    MenuItem("Samp filt eval freq (sec)", FILT_INTV)
      MenuPick(FILT_INTV, 1, 3, 5, 15, 30, 60, 300)
    SubMenu("Samp filt run means")
      MenuItem("WD (min)", WDFILT_TIME)
        MenuPick(WDFILT_TIME, 1, 2, 3, 4, 5, 10, 15)
      MenuItem("RH (min)", RHFILT_TIME)
        MenuPick(RHFILT_TIME, 1, 2, 3, 4, 5, 10, 15)
    EndSubMenu
    MenuRecompile("Apply now?", recompile)
      MenuPick(Cancel,Yes)
  EndSubMenu
EndMenu


'============================= SUBROUTINES ==================================
Sub update_deadband() 'FIXME TODO
  If (deadband=NAN OR Uz_Std=NAN OR Uz_Std=0) Then
    deadband = dband_def
  Else
    deadband = dband_mult * Uz_Std
  EndIf
  If (deadband < dband_min) Then deadband = dband_min
  neg_deadband = -1*deadband
EndSub

Sub set_default_choices() '-------------------------------------------------
  ch_dband_mult = DEF_DBAND_MULT
  ch_dband_min = DEF_DBAND_MIN
  ch_dband_def = DEF_DBAND_DEF
  ch_sonic_azimuth = DEF_SONIC_AZIMUTH
  ch_sonic_height = DEF_SONIC_HEIGHT
  ch_site_declin = DEF_SITE_DECLIN
  ch_site_rufness = DEF_SITE_RUFNESS
  ch_site_fetch_N = DEF_SITE_FETCH_N
  ch_site_fetch_E = DEF_SITE_FETCH_E
  ch_site_fetch_S = DEF_SITE_FETCH_S
  ch_site_fetch_W = DEF_SITE_FETCH_W
  ch_fill_margin = DEF_FILL_MARGIN
  ch_wdfilt_min = DEF_WDFILT_MIN
  ch_wdfilt_max = DEF_WDFILT_MAX
  ch_rhfilt_max = DEF_RHFILT_MAX
EndSub

Sub populate_choices()
  Move(choice(1),NUM_SETTINGS,settings(1),NUM_SETTINGS)
EndSub

Sub save_current_choices()
  'HINT treat azimuth differently since 0 is valid option
  If (ch_sonic_azimuth < 0) Then
    ch_sonic_azimuth = -1
    azimuth = 0
  Else
    ch_sonic_azimuth = ch_sonic_azimuth MOD 360
    azimuth = sonic_azimuth
  EndIf

  If (ch_sonic_height < 0) Then (ch_sonic_height = 0)
  If (ch_site_declin < DECLIN_MIN) Then (ch_site_declin = DECLIN_MIN)
  If (ch_site_declin > DECLIN_MAX) Then (ch_site_declin = DECLIN_MAX)
  If (ch_site_fetch_N < 0) Then (ch_site_fetch_N = 0)
  If (ch_site_fetch_E < 0) Then (ch_site_fetch_E = 0)
  If (ch_site_fetch_S < 0) Then (ch_site_fetch_S = 0)
  If (ch_site_fetch_W < 0) Then (ch_site_fetch_W = 0)
  If (ch_site_rufness < 0) Then (ch_site_rufness = 0)

  If (ch_wdfilt_min < 0) Then (ch_wdfilt_min = 0)
  If (ch_wdfilt_max > 359) Then (ch_wdfilt_max = 359)
  If (ch_wdfilt_max < ch_wdfilt_min) Then (ch_wdfilt_max = ch_wdfilt_min)
  If (ch_rhfilt_max < RHFILT_MIN) Then (ch_rhfilt_max = RHFILT_MIN)
  If (ch_rhfilt_max > 100) Then (ch_rhfilt_max = 100)

  If (ch_fill_margin < MARGIN_MIN) Then (ch_fill_margin = MARGIN_MIN)
  If (ch_fill_margin > MARGIN_MAX) Then (ch_fill_margin = MARGIN_MAX)

  'HINT order matters when validating dband settings!
  If (ch_dband_min < 0) Then (ch_dband_min = 0)
  If (ch_dband_def < ch_dband_min) Then (ch_dband_def = ch_dband_min)
  If (ch_dband_mult > DBMULT_MAX) Then (ch_dband_mult = DBMULT_MAX)
  If (ch_dband_mult < 0 OR (ch_dband_mult = 0 AND ch_dband_min > 0)) Then
    ch_dband_mult = DEF_DBAND_MULT
  EndIf

  ch_sonic_azimuth = INT(ch_sonic_azimuth)
  ch_site_declin = INT(ch_site_declin)
  ch_site_fetch_N = INT(ch_site_fetch_N)
  ch_site_fetch_E = INT(ch_site_fetch_E)
  ch_site_fetch_S = INT(ch_site_fetch_S)
  ch_site_fetch_W = INT(ch_site_fetch_W)
  ch_wdfilt_min = INT(ch_wdfilt_min)
  ch_wdfilt_max = INT(ch_wdfilt_max)
  ch_rhfilt_max = INT(ch_rhfilt_max)
  ch_fill_margin = INT(ch_fill_margin)
  Move(settings(1),NUM_SETTINGS,choice(1),NUM_SETTINGS)
  Calfile(settings,NUM_SETTINGS,SETTINGS_FILE,WRITEFILE)

  update_deadband()
  can_fill_margin = fill_margin/100.0 'scale % -> ratio
EndSub

Sub load_settings()
  filehandle = FileOpen(SETTINGS_FILE,"rb",0)
  FileClose(filehandle)
  If (filehandle=0) Then  'file not found
    set_default_choices()
  Else
    Calfile(settings,NUM_SETTINGS,SETTINGS_FILE,READFILE)
    populate_choices()
  EndIf
  save_current_choices()
EndSub

Sub setdefault_settings()
  FileManage(SETTINGS_FILE,8) 'delete file
  load_settings()
EndSub

Sub end_run() '-------------------------------------------------------------
  is_running = False
  run_aborted = Cancel
  elapsed_time = Timer(RUN_TIMER,min,STOP)

  rea_finished = True
  CallTable(work_rea)
  If (work_rea.Output(1,1)) Then
    GetRecord(rea_out(1),work_rea,1)
    delta_Ts = rea_Ts_up_Avg2 - rea_Ts_dn_Avg2
    beta_Ts_Uz = cov_Ts_Uz2 / (Uz_Std2 * delta_Ts)
    beta_Ts_Uz_rot = cov_Ts_Uz_rot2 / (Uz_rot_Std2 * delta_Ts)
    beta_Ts_W = cov_Ts_Uz_rot / (W_Std * delta_Ts)
    vlv_up_fraction = vlv_up_ON_Tot2 / vlv_possible2
    vlv_dn_fraction = vlv_dn_ON_Tot2 / vlv_possible2
    unfilt_vlv_up_fraction = unfilt_vlv_up_ON_Tot2 / unfilt_vlv_possible2
    unfilt_vlv_dn_fraction = unfilt_vlv_dn_ON_Tot2 / unfilt_vlv_possible2
    fraction_filtered_out = 1.0 - (vlv_possible2/unfilt_vlv_possible2)
    CallTable(rea)
  EndIf
  
  rea_finished = False
  Timer(RUN_TIMER,min,STOP_RESET)
EndSub

Sub reset_rotangles() '-----------------------------------------------------
  Move(rot_angles(1),6,0,1)
  CT = 1.0
EndSub

Sub setup() 
  reset_rotangles() 'TODO retain rotation angles across power cycles
  deadband = NAN 'caught in update_deadband(), invoked within load_settings()
  load_settings()
  CallTable(info)
  
  SerialOpen(SONIC_COM,SONIC_BAUD,SONIC_FORMAT,0,SONIC_BUFF)
  PortSet(SW12_CAN_P,True)
  PortSet(SW12_PMP_P,True)
EndSub

'============================== PROGRAM =====================================
BeginProg
  setup()
  
  Scan(FAST_INTV,msec,FAST_BUFF,0)
    If (mean_baro=NAN) Then
      'TODO: check each sensor's run avg value to detect sensor fault?
    ElseIf (run_aborted) Then
      end_run()
    ElseIf (is_running) Then
      run_queued = Cancel 'prevent queuing run while one is in-progress
'    ElseIf (run_queued) Then
'      If (NOT run_already_queued) Then
'        update_start_time()
'        run_already_queued = True
'      EndIf
'    Else
'      run_already_queued = False
    EndIf

    'LOGIC PERFORMED AT 1 Hz
    If (cans_full) Then 'TODO FIXME: OR pump_fault) Then
      'do not begin run
    ElseIf (run_queued) Then 'TODO qualify with start time
      is_running = True
      run_queued = Cancel
      elapsed_time = Timer(RUN_TIMER,min,START)
'    ElseIf (is_running) Then
'      elapsed_time = Timer(RUN_TIMER,min,QUERY)
'      If (elapsed_time >= run_dur) Then end_run()
    EndIf
    PortSet(CTRL_PUMPS,is_running)

    SerialInRecord(SONIC_COM,sonic_record,0,SONIC_RECLEN,&h0D,sonic_bytes,11)
    SplitStr(sonic(1),sonic_record,0,5,0)
    disable_sonic = (sonic_diag > 0 OR sonic_diag=NAN OR sonic_Ts=NAN OR _
                                sonic_Ux=NAN OR sonic_Uy=NAN OR sonic_Uz=NAN)
    AvgRun(mean_Ux,1,sonic_Ux,WDFILT_RUNAVG)
    AvgRun(mean_Uy,1,sonic_Uy,WDFILT_RUNAVG)
    Uz_rot = sonic_Uz*CT - sonic_Uz*ST*CE - sonic_Uy*ST*SE

    If (NOT is_running OR wait_flag) Then
      vlv_up_ON = False
      vlv_dn_ON = False
      vlv_status = 0
      If poor_WD Then vlv_status += &b0100 'WD flag
      If poor_RH Then vlv_status += &b1000 'RH flag (rain proxy)
    ElseIf (Uz_rot >= deadband) Then
      vlv_up_ON = True
      vlv_dn_ON = False
      vlv_status = &b01
    ElseIf (Uz_rot <= neg_deadband) Then
      vlv_up_ON = False
      vlv_dn_ON = True
      vlv_status = &b10
    EndIf
    PortSet(CTRL_VLV_UP,vlv_up_ON) 'HINT use PortSet (measurement task) not
    PortSet(CTRL_VLV_DN,vlv_dn_ON) 'WriteIO (processing task = delayed)

    'HINT separate from valve on/off so REA sim can occur when not sampling
    Move(rea_sim(1),2,NAN,1)
    If (Uz_rot >= deadband) Then
      rea_Ts_up = sonic_Ts
    ElseIf (Uz_rot <= neg_deadband) Then
      rea_Ts_dn = sonic_Ts
    EndIf

    cov_sonic(1,1) = sonic_Ts   'load covariance arrays
    Move(cov_sonic(1,2),3,sonic_Ux,3)
    cov_rotate(1,1) = sonic_Ts
    cov_rotate(1,2) = Uz_rot

    CallTable(ts_fast)
    CallTable(work)
    If (work.Output(1,1)) Then
      GetRecord(work_out(1),work,1)

      sqrt_UV = SQR(Ux_Avg^2 + Uy_Avg^2)
      sqrt_UVW = SQR(Ux_Avg^2 + Uy_Avg^2 + Uz_Avg^2)
      CE = Ux_Avg/sqrt_UV
      SE = Uy_Avg/sqrt_UV
      CT = sqrt_UV/sqrt_UVW
      ST = Uz_Avg/sqrt_UVW
      If (CE=NAN OR SE=NAN OR CT=NAN OR ST=NAN) Then
        reset_rotangles()
      Else
        eta = ATN2(SE,CE)*180/PI
        theta = ATN2(ST,CT)*180/PI
      EndIf
      U_Avg = Ux_Avg*CT*CE + Uy_Avg*CT*SE + Uz_Avg*ST
      V_Avg = Uy_Avg*CE - Ux_Avg*SE
      W_Avg = Uz_Avg*CT - Ux_Avg*ST*SE - Uy_Avg*ST*SE
      'HINT in following line *_Std values are still covariances
      W_Std = SQR(Uz_Std*CT*CT + Ux_Std*ST*ST*CE*CE + Uy_Std*ST*ST*SE*SE - 2*cov_Uy_Uz*CT*ST*SE + 2*cov_Ux_Uy*CE*ST*ST*SE)
      'now convert cov -> std
      Ts_Std = SQR(Ts_Std)
      Uz_Std = SQR(Uz_Std)
      Uz_rot_Std = SQR(Uz_rot_Std)

      update_deadband()

      If (sonic_WS_sclr_Avg = NAN AND sonic_WS_rslt_Avg = NAN) Then
        sonic_WD_rslt_Avg = NAN
        sonic_WD_csi_Std = NAN
      Else
        sonic_WD_rslt_Avg = (Round(sonic_WD_rslt_Avg,0)+sonic_azimuth) MOD 360
      EndIf
      
      SatVP(hmp_e_sat_Avg, hmp_T_Avg)
      hmp_RH_Avg = 100*hmp_e_Avg/hmp_e_sat_Avg
      'DewPoint(hmp_Tdew_Avg, hmp_T_Avg, hmp_RH_Avg) 'TODO ????

      delta_Ts = rea_Ts_up_Avg - rea_Ts_dn_Avg
      beta_Ts_Uz = cov_Ts_Uz / (Uz_Std * delta_Ts)
      beta_Ts_Uz_rot = cov_Ts_Uz_rot / (Uz_rot_Std * delta_Ts)
      beta_Ts_W = cov_Ts_Uz_rot / (W_Std * delta_Ts)
      
      vlv_up_fraction = vlv_up_ON_Tot/vlv_possible
      vlv_dn_fraction = vlv_dn_ON_Tot/vlv_possible
      unfilt_vlv_up_fraction = unfilt_vlv_up_ON_Tot/unfilt_vlv_possible
      unfilt_vlv_dn_fraction = unfilt_vlv_dn_ON_Tot/unfilt_vlv_possible
      fraction_filtered_out = 1.0 - (vlv_possible/unfilt_vlv_possible)
    EndIf 'new record output
    CallTable(stats)
    
    If (is_running) Then CallTable(work_rea)

    If (save_settings) Then
      save_current_choices()
      save_settings = Cancel
      CallTable(info)
    ElseIf (discard_settings) Then
      populate_choices()
      discard_settings = Cancel
    ElseIf (reset_settings) Then
      setdefault_settings()
      reset_settings = Cancel
      CallTable(info)
    EndIf

    inbetween_slow_scan = True
    If (just_had_slow_scan) Then
      just_had_slow_scan = False
      inbetween_slow_scan = False
    EndIf
  NextScan

  SlowSequence
  Scan(SLOW_INTV,sec,3,0)
    VoltDiff(hmp_T,1,mv1000,HMP_T_DF,True,0,INTEG,HMP_T_MULT,HMP_T_OFF)
    VoltDiff(hmp_RH,1,mv1000,HMP_RH_DF,True,0,INTEG,HMP_RH_MULT,HMP_RH_OFF)
    VaporPressure(hmp_e, hmp_T, hmp_RH)
    AvgRun(mean_RH,1,hmp_RH,RHFILT_RUNAVG) 'HACK FIXME this is naive filter,
    'should be ratio of run mean H2O vapor press to run sat. H2O vapor press

    VoltSe(press_can_UP,1,mv5000,P_CAN_UP_SE,True,0,INTEG, P_CAN_UP_MLT,P_CAN_UP_OFF)
    VoltSe(press_can_DN,1,mv5000,P_CAN_DN_SE,True,0,INTEG, P_CAN_DN_MLT,P_CAN_DN_OFF)
    VoltSe(press_pump_UP,1,mv5000,P_PMP_UP_SE,True,0,INTEG, P_PMP_UP_MLT,P_PMP_UP_OFF)
    VoltSe(press_pump_DN,1,mv5000,P_PMP_DN_SE,True,0,INTEG, P_PMP_DN_MLT,P_PMP_DN_OFF)
    VoltSe(press_baro,1,mv5000,P_BARO_SE,True,0,INTEG, P_BARO_MLT,P_BARO_OFF)
    
    AvgRun(mean_can_UP,1,press_can_UP,PRESS_RUNAVG)
    AvgRun(mean_can_DN,1,press_can_DN,PRESS_RUNAVG)
    AvgRun(mean_pump_UP,1,press_pump_UP,PRESS_RUNAVG)
    AvgRun(mean_pump_DN,1,press_pump_DN,PRESS_RUNAVG)
    AvgRun(mean_baro,1,press_baro,PRESS_RUNAVG)

    'TODO: compare to longer-term running mean of barometric pressure?
    '      OR maybe compare to minimum barometric pressure in last 24 hrs?
    max_can_press = mean_baro * (CRITICAL_RATIO - can_fill_margin)
    max_pump_press = max_can_press * PUMP_SF
    cans_full = mean_can_UP >= max_can_press OR mean_can_DN >= max_can_press
    pump_fault = is_running AND (mean_pump_UP >= max_pump_press OR _
                                 mean_pump_DN >= max_pump_press)
    'FIXME: pump_fault has race condition where cannot be true until >5 sec 
    '       after start of run, therefore can't be used as flag proper

    CallTable(ts_slow)
    just_had_slow_scan = True
  NextScan

  SlowSequence
  Scan(FILT_INTV,sec,1,0)
    mean_WS = SQR(mean_Ux*mean_Ux + mean_Uy*mean_Uy)
    mean_WD = INT(ATN2(-1*mean_Ux,-1*mean_Uy)*DperR + _
                       SONIC_VAZ + sonic_azimuth + site_declin + 360) MOD 360
    poor_WD = mean_WD < wdfilt_min OR mean_WD > wdfilt_max
    poor_RH = mean_RH > rhfilt_max

    wait_flag = poor_WD OR poor_RH
  NextScan

  SlowSequence
  Scan(GPS_INTV,min,1,0)
    GPS(gps16x(1),GPS_COM,UTC_OFFSET*3600,GPS_MAX_DIFF,nmea_str(1))
    CallTable(gps_daily)
  NextScan
EndProg

